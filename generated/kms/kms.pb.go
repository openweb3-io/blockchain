// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: kms/kms.proto

package kms

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SigningAlgorithmSpec int32

const (
	SigningAlgorithmSpec_RsassaPssSha256      SigningAlgorithmSpec = 0
	SigningAlgorithmSpec_RsassaPssSha384      SigningAlgorithmSpec = 1
	SigningAlgorithmSpec_RsassaPssSha512      SigningAlgorithmSpec = 2
	SigningAlgorithmSpec_RsassaPkcs1V15Sha256 SigningAlgorithmSpec = 3
	SigningAlgorithmSpec_RsassaPkcs1V15Sha384 SigningAlgorithmSpec = 4
	SigningAlgorithmSpec_RsassaPkcs1V15Sha512 SigningAlgorithmSpec = 5
	SigningAlgorithmSpec_EcdsaSha256          SigningAlgorithmSpec = 6
	SigningAlgorithmSpec_EcdsaSha384          SigningAlgorithmSpec = 7
	SigningAlgorithmSpec_EcdsaSha512          SigningAlgorithmSpec = 8
	SigningAlgorithmSpec_Sm2dsa               SigningAlgorithmSpec = 9
)

// Enum value maps for SigningAlgorithmSpec.
var (
	SigningAlgorithmSpec_name = map[int32]string{
		0: "RsassaPssSha256",
		1: "RsassaPssSha384",
		2: "RsassaPssSha512",
		3: "RsassaPkcs1V15Sha256",
		4: "RsassaPkcs1V15Sha384",
		5: "RsassaPkcs1V15Sha512",
		6: "EcdsaSha256",
		7: "EcdsaSha384",
		8: "EcdsaSha512",
		9: "Sm2dsa",
	}
	SigningAlgorithmSpec_value = map[string]int32{
		"RsassaPssSha256":      0,
		"RsassaPssSha384":      1,
		"RsassaPssSha512":      2,
		"RsassaPkcs1V15Sha256": 3,
		"RsassaPkcs1V15Sha384": 4,
		"RsassaPkcs1V15Sha512": 5,
		"EcdsaSha256":          6,
		"EcdsaSha384":          7,
		"EcdsaSha512":          8,
		"Sm2dsa":               9,
	}
)

func (x SigningAlgorithmSpec) Enum() *SigningAlgorithmSpec {
	p := new(SigningAlgorithmSpec)
	*p = x
	return p
}

func (x SigningAlgorithmSpec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningAlgorithmSpec) Descriptor() protoreflect.EnumDescriptor {
	return file_kms_kms_proto_enumTypes[0].Descriptor()
}

func (SigningAlgorithmSpec) Type() protoreflect.EnumType {
	return &file_kms_kms_proto_enumTypes[0]
}

func (x SigningAlgorithmSpec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningAlgorithmSpec.Descriptor instead.
func (SigningAlgorithmSpec) EnumDescriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{0}
}

type KeySpec int32

const (
	KeySpec_Rsa2048          KeySpec = 0  // RSA_2048
	KeySpec_Rsa3072          KeySpec = 1  // RSA_3072
	KeySpec_Rsa4096          KeySpec = 2  // RSA_4096"
	KeySpec_EccNistP256      KeySpec = 3  // ECC_NIST_P256
	KeySpec_EccNistP384      KeySpec = 4  //	ECC_NIST_P384
	KeySpec_EccNistP521      KeySpec = 5  // ECC_NIST_P521
	KeySpec_EccSecgP256k1    KeySpec = 6  // ECC_SECG_P256K1
	KeySpec_EccEd25519       KeySpec = 7  // ECC_ED_25519
	KeySpec_SymmetricDefault KeySpec = 8  // SYMMETRIC_DEFAULT
	KeySpec_Hmac224          KeySpec = 9  // HMAC_224
	KeySpec_Hmac256          KeySpec = 10 // HMAC_256
	KeySpec_Hmac384          KeySpec = 11 // HMAC_384
	KeySpec_Hmac512          KeySpec = 12 // HMAC_512
	KeySpec_Sm2              KeySpec = 13 // SM2
)

// Enum value maps for KeySpec.
var (
	KeySpec_name = map[int32]string{
		0:  "Rsa2048",
		1:  "Rsa3072",
		2:  "Rsa4096",
		3:  "EccNistP256",
		4:  "EccNistP384",
		5:  "EccNistP521",
		6:  "EccSecgP256k1",
		7:  "EccEd25519",
		8:  "SymmetricDefault",
		9:  "Hmac224",
		10: "Hmac256",
		11: "Hmac384",
		12: "Hmac512",
		13: "Sm2",
	}
	KeySpec_value = map[string]int32{
		"Rsa2048":          0,
		"Rsa3072":          1,
		"Rsa4096":          2,
		"EccNistP256":      3,
		"EccNistP384":      4,
		"EccNistP521":      5,
		"EccSecgP256k1":    6,
		"EccEd25519":       7,
		"SymmetricDefault": 8,
		"Hmac224":          9,
		"Hmac256":          10,
		"Hmac384":          11,
		"Hmac512":          12,
		"Sm2":              13,
	}
)

func (x KeySpec) Enum() *KeySpec {
	p := new(KeySpec)
	*p = x
	return p
}

func (x KeySpec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeySpec) Descriptor() protoreflect.EnumDescriptor {
	return file_kms_kms_proto_enumTypes[1].Descriptor()
}

func (KeySpec) Type() protoreflect.EnumType {
	return &file_kms_kms_proto_enumTypes[1]
}

func (x KeySpec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeySpec.Descriptor instead.
func (KeySpec) EnumDescriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{1}
}

type KeyUsageType int32

const (
	KeyUsageType_SignVerify        KeyUsageType = 0
	KeyUsageType_EncryptDecrypt    KeyUsageType = 1
	KeyUsageType_GenerateVerifyMac KeyUsageType = 2
)

// Enum value maps for KeyUsageType.
var (
	KeyUsageType_name = map[int32]string{
		0: "SignVerify",
		1: "EncryptDecrypt",
		2: "GenerateVerifyMac",
	}
	KeyUsageType_value = map[string]int32{
		"SignVerify":        0,
		"EncryptDecrypt":    1,
		"GenerateVerifyMac": 2,
	}
)

func (x KeyUsageType) Enum() *KeyUsageType {
	p := new(KeyUsageType)
	*p = x
	return p
}

func (x KeyUsageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyUsageType) Descriptor() protoreflect.EnumDescriptor {
	return file_kms_kms_proto_enumTypes[2].Descriptor()
}

func (KeyUsageType) Type() protoreflect.EnumType {
	return &file_kms_kms_proto_enumTypes[2]
}

func (x KeyUsageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyUsageType.Descriptor instead.
func (KeyUsageType) EnumDescriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{2}
}

type MessageType int32

const (
	MessageType_Raw    MessageType = 0
	MessageType_Digest MessageType = 1
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "Raw",
		1: "Digest",
	}
	MessageType_value = map[string]int32{
		"Raw":    0,
		"Digest": 1,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_kms_kms_proto_enumTypes[3].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_kms_kms_proto_enumTypes[3]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{3}
}

type ImportKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string            `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Uid         *string           `protobuf:"bytes,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Chain       *string           `protobuf:"bytes,4,opt,name=chain,proto3,oneof" json:"chain,omitempty"`
	KeySpec     *KeySpec          `protobuf:"varint,5,opt,name=keySpec,proto3,enum=kms.KeySpec,oneof" json:"keySpec,omitempty"`
	KeyUsage    KeyUsageType      `protobuf:"varint,6,opt,name=keyUsage,proto3,enum=kms.KeyUsageType" json:"keyUsage,omitempty"`
	Tags        []*Tag            `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extra       string            `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	Material    []byte            `protobuf:"bytes,10,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *ImportKeyRequest) Reset() {
	*x = ImportKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeyRequest) ProtoMessage() {}

func (x *ImportKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeyRequest.ProtoReflect.Descriptor instead.
func (*ImportKeyRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{0}
}

func (x *ImportKeyRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ImportKeyRequest) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *ImportKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImportKeyRequest) GetChain() string {
	if x != nil && x.Chain != nil {
		return *x.Chain
	}
	return ""
}

func (x *ImportKeyRequest) GetKeySpec() KeySpec {
	if x != nil && x.KeySpec != nil {
		return *x.KeySpec
	}
	return KeySpec_Rsa2048
}

func (x *ImportKeyRequest) GetKeyUsage() KeyUsageType {
	if x != nil {
		return x.KeyUsage
	}
	return KeyUsageType_SignVerify
}

func (x *ImportKeyRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ImportKeyRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ImportKeyRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ImportKeyRequest) GetMaterial() []byte {
	if x != nil {
		return x.Material
	}
	return nil
}

type ImportKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string                 `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id          string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid         *string                `protobuf:"bytes,3,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extra       string                 `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	Chain       string                 `protobuf:"bytes,7,opt,name=chain,proto3" json:"chain,omitempty"`
	KeySpec     KeySpec                `protobuf:"varint,8,opt,name=keySpec,proto3,enum=kms.KeySpec" json:"keySpec,omitempty"`
	KeyUsage    KeyUsageType           `protobuf:"varint,9,opt,name=keyUsage,proto3,enum=kms.KeyUsageType" json:"keyUsage,omitempty"`
	Tags        []*Tag                 `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ImportKeyReply) Reset() {
	*x = ImportKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeyReply) ProtoMessage() {}

func (x *ImportKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeyReply.ProtoReflect.Descriptor instead.
func (*ImportKeyReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{1}
}

func (x *ImportKeyReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ImportKeyReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImportKeyReply) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *ImportKeyReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImportKeyReply) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ImportKeyReply) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ImportKeyReply) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ImportKeyReply) GetKeySpec() KeySpec {
	if x != nil {
		return x.KeySpec
	}
	return KeySpec_Rsa2048
}

func (x *ImportKeyReply) GetKeyUsage() KeyUsageType {
	if x != nil {
		return x.KeyUsage
	}
	return KeyUsageType_SignVerify
}

func (x *ImportKeyReply) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ImportKeyReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ImportKeyReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EnableKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EnableKeyRequest) Reset() {
	*x = EnableKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableKeyRequest) ProtoMessage() {}

func (x *EnableKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableKeyRequest.ProtoReflect.Descriptor instead.
func (*EnableKeyRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{2}
}

func (x *EnableKeyRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *EnableKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EnableKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EnableKeyReply) Reset() {
	*x = EnableKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableKeyReply) ProtoMessage() {}

func (x *EnableKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableKeyReply.ProtoReflect.Descriptor instead.
func (*EnableKeyReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{3}
}

func (x *EnableKeyReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *EnableKeyReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DisableKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DisableKeyRequest) Reset() {
	*x = DisableKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableKeyRequest) ProtoMessage() {}

func (x *DisableKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableKeyRequest.ProtoReflect.Descriptor instead.
func (*DisableKeyRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{4}
}

func (x *DisableKeyRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DisableKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DisableKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DisableKeyReply) Reset() {
	*x = DisableKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableKeyReply) ProtoMessage() {}

func (x *DisableKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableKeyReply.ProtoReflect.Descriptor instead.
func (*DisableKeyReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{5}
}

func (x *DisableKeyReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DisableKeyReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DescribeKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DescribeKeyRequest) Reset() {
	*x = DescribeKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeKeyRequest) ProtoMessage() {}

func (x *DescribeKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeKeyRequest.ProtoReflect.Descriptor instead.
func (*DescribeKeyRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeKeyRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DescribeKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DescribeKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string                 `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id          string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid         *string                `protobuf:"bytes,3,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	KeySpec     KeySpec                `protobuf:"varint,4,opt,name=keySpec,proto3,enum=kms.KeySpec" json:"keySpec,omitempty"`
	Chain       string                 `protobuf:"bytes,5,opt,name=chain,proto3" json:"chain,omitempty"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    map[string]string      `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *DescribeKeyReply) Reset() {
	*x = DescribeKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeKeyReply) ProtoMessage() {}

func (x *DescribeKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeKeyReply.ProtoReflect.Descriptor instead.
func (*DescribeKeyReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeKeyReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DescribeKeyReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DescribeKeyReply) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *DescribeKeyReply) GetKeySpec() KeySpec {
	if x != nil {
		return x.KeySpec
	}
	return KeySpec_Rsa2048
}

func (x *DescribeKeyReply) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeKeyReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DescribeKeyReply) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DescribeKeyReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DescribeKeyReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{8}
}

func (x *Tag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type TagResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Tags  []*Tag `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TagResourceRequest) Reset() {
	*x = TagResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagResourceRequest) ProtoMessage() {}

func (x *TagResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagResourceRequest.ProtoReflect.Descriptor instead.
func (*TagResourceRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{9}
}

func (x *TagResourceRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *TagResourceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TagResourceRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TagResourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TagResourceReply) Reset() {
	*x = TagResourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagResourceReply) ProtoMessage() {}

func (x *TagResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagResourceReply.ProtoReflect.Descriptor instead.
func (*TagResourceReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{10}
}

type CreateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string            `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Uid         *string           `protobuf:"bytes,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Chain       *string           `protobuf:"bytes,4,opt,name=chain,proto3,oneof" json:"chain,omitempty"`
	KeySpec     *KeySpec          `protobuf:"varint,5,opt,name=keySpec,proto3,enum=kms.KeySpec,oneof" json:"keySpec,omitempty"`
	KeyUsage    KeyUsageType      `protobuf:"varint,6,opt,name=keyUsage,proto3,enum=kms.KeyUsageType" json:"keyUsage,omitempty"`
	Tags        []*Tag            `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extra       string            `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CreateKeyRequest) Reset() {
	*x = CreateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyRequest) ProtoMessage() {}

func (x *CreateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateKeyRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{11}
}

func (x *CreateKeyRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CreateKeyRequest) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *CreateKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateKeyRequest) GetChain() string {
	if x != nil && x.Chain != nil {
		return *x.Chain
	}
	return ""
}

func (x *CreateKeyRequest) GetKeySpec() KeySpec {
	if x != nil && x.KeySpec != nil {
		return *x.KeySpec
	}
	return KeySpec_Rsa2048
}

func (x *CreateKeyRequest) GetKeyUsage() KeyUsageType {
	if x != nil {
		return x.KeyUsage
	}
	return KeyUsageType_SignVerify
}

func (x *CreateKeyRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateKeyRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateKeyRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type CreateKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string                 `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id          string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid         *string                `protobuf:"bytes,3,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extra       string                 `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	Chain       string                 `protobuf:"bytes,7,opt,name=chain,proto3" json:"chain,omitempty"`
	KeySpec     KeySpec                `protobuf:"varint,8,opt,name=keySpec,proto3,enum=kms.KeySpec" json:"keySpec,omitempty"`
	KeyUsage    KeyUsageType           `protobuf:"varint,9,opt,name=keyUsage,proto3,enum=kms.KeyUsageType" json:"keyUsage,omitempty"`
	Tags        []*Tag                 `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CreateKeyReply) Reset() {
	*x = CreateKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyReply) ProtoMessage() {}

func (x *CreateKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyReply.ProtoReflect.Descriptor instead.
func (*CreateKeyReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{12}
}

func (x *CreateKeyReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CreateKeyReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateKeyReply) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *CreateKeyReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateKeyReply) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateKeyReply) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *CreateKeyReply) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateKeyReply) GetKeySpec() KeySpec {
	if x != nil {
		return x.KeySpec
	}
	return KeySpec_Rsa2048
}

func (x *CreateKeyReply) GetKeyUsage() KeyUsageType {
	if x != nil {
		return x.KeyUsage
	}
	return KeyUsageType_SignVerify
}

func (x *CreateKeyReply) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateKeyReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateKeyReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string                 `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id          string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid         *string                `protobuf:"bytes,3,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extra       string                 `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	Chain       string                 `protobuf:"bytes,7,opt,name=chain,proto3" json:"chain,omitempty"`
	KeySpec     KeySpec                `protobuf:"varint,8,opt,name=keySpec,proto3,enum=kms.KeySpec" json:"keySpec,omitempty"`
	KeyUsage    KeyUsageType           `protobuf:"varint,9,opt,name=keyUsage,proto3,enum=kms.KeyUsageType" json:"keyUsage,omitempty"`
	Tags        []*Tag                 `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{13}
}

func (x *Key) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Key) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Key) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *Key) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Key) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Key) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *Key) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Key) GetKeySpec() KeySpec {
	if x != nil {
		return x.KeySpec
	}
	return KeySpec_Rsa2048
}

func (x *Key) GetKeyUsage() KeyUsageType {
	if x != nil {
		return x.KeyUsage
	}
	return KeyUsageType_SignVerify
}

func (x *Key) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Key) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Key) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            string               `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id               string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Message          []byte               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	SigningAlgorithm SigningAlgorithmSpec `protobuf:"varint,4,opt,name=signingAlgorithm,proto3,enum=kms.SigningAlgorithmSpec" json:"signingAlgorithm,omitempty"`
	MessageType      MessageType          `protobuf:"varint,5,opt,name=messageType,proto3,enum=kms.MessageType" json:"messageType,omitempty"`
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{14}
}

func (x *SignRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SignRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SignRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignRequest) GetSigningAlgorithm() SigningAlgorithmSpec {
	if x != nil {
		return x.SigningAlgorithm
	}
	return SigningAlgorithmSpec_RsassaPssSha256
}

func (x *SignRequest) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_Raw
}

type SignReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignReply) Reset() {
	*x = SignReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignReply) ProtoMessage() {}

func (x *SignReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignReply.ProtoReflect.Descriptor instead.
func (*SignReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{15}
}

func (x *SignReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SignReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SignReply) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GetPublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPublicKeyRequest) Reset() {
	*x = GetPublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicKeyRequest) ProtoMessage() {}

func (x *GetPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*GetPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{16}
}

func (x *GetPublicKeyRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetPublicKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPublicKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PublicKey []byte `protobuf:"bytes,3,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (x *GetPublicKeyReply) Reset() {
	*x = GetPublicKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicKeyReply) ProtoMessage() {}

func (x *GetPublicKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicKeyReply.ProtoReflect.Descriptor instead.
func (*GetPublicKeyReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{17}
}

func (x *GetPublicKeyReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetPublicKeyReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPublicKeyReply) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type ListKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  *string `protobuf:"bytes,1,opt,name=appId,proto3,oneof" json:"appId,omitempty"`
	Cursor *string `protobuf:"bytes,2,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	Limit  int32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListKeyRequest) Reset() {
	*x = ListKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyRequest) ProtoMessage() {}

func (x *ListKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyRequest.ProtoReflect.Descriptor instead.
func (*ListKeyRequest) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{18}
}

func (x *ListKeyRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *ListKeyRequest) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *ListKeyRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []*Key  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	HasNext     bool    `protobuf:"varint,2,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
	HasPrev     bool    `protobuf:"varint,3,opt,name=hasPrev,proto3" json:"hasPrev,omitempty"`
	EndCursor   *string `protobuf:"bytes,4,opt,name=endCursor,proto3,oneof" json:"endCursor,omitempty"`
	StartCursor *string `protobuf:"bytes,5,opt,name=startCursor,proto3,oneof" json:"startCursor,omitempty"`
}

func (x *ListKeyReply) Reset() {
	*x = ListKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kms_kms_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyReply) ProtoMessage() {}

func (x *ListKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_kms_kms_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyReply.ProtoReflect.Descriptor instead.
func (*ListKeyReply) Descriptor() ([]byte, []int) {
	return file_kms_kms_proto_rawDescGZIP(), []int{19}
}

func (x *ListKeyReply) GetData() []*Key {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListKeyReply) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *ListKeyReply) GetHasPrev() bool {
	if x != nil {
		return x.HasPrev
	}
	return false
}

func (x *ListKeyReply) GetEndCursor() string {
	if x != nil && x.EndCursor != nil {
		return *x.EndCursor
	}
	return ""
}

func (x *ListKeyReply) GetStartCursor() string {
	if x != nil && x.StartCursor != nil {
		return *x.StartCursor
	}
	return ""
}

var File_kms_kms_proto protoreflect.FileDescriptor

var file_kms_kms_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6b, 0x6d, 0x73, 0x2f, 0x6b, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6b, 0x6d, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4,
	0x03, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x48, 0x02, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b,
	0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6b, 0x65,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x22, 0x88, 0x04, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b,
	0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64,
	0x22, 0x38, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x0e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x39, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a,
	0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xa9, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x22, 0x49,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xa8, 0x03, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x48, 0x02, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6b, 0x65, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x22, 0x88, 0x04, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x22, 0xf2, 0x03,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75,
	0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b,
	0x6d, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x3b,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x22, 0x73, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65,
	0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x12, 0x21, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x2a, 0xe2, 0x01, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x73, 0x61, 0x73, 0x73, 0x61, 0x50, 0x73, 0x73, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x73, 0x61, 0x73, 0x73, 0x61, 0x50, 0x73, 0x73, 0x53,
	0x68, 0x61, 0x33, 0x38, 0x34, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x73, 0x61, 0x73, 0x73,
	0x61, 0x50, 0x73, 0x73, 0x53, 0x68, 0x61, 0x35, 0x31, 0x32, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x73, 0x61, 0x73, 0x73, 0x61, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x56, 0x31, 0x35, 0x53, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x73, 0x61, 0x73, 0x73, 0x61,
	0x50, 0x6b, 0x63, 0x73, 0x31, 0x56, 0x31, 0x35, 0x53, 0x68, 0x61, 0x33, 0x38, 0x34, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x73, 0x61, 0x73, 0x73, 0x61, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x56,
	0x31, 0x35, 0x53, 0x68, 0x61, 0x35, 0x31, 0x32, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x63,
	0x64, 0x73, 0x61, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x63, 0x64, 0x73, 0x61, 0x53, 0x68, 0x61, 0x33, 0x38, 0x34, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x63, 0x64, 0x73, 0x61, 0x53, 0x68, 0x61, 0x35, 0x31, 0x32, 0x10, 0x08, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x6d, 0x32, 0x64, 0x73, 0x61, 0x10, 0x09, 0x2a, 0xd9, 0x01, 0x0a, 0x07, 0x4b, 0x65,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x73, 0x61, 0x32, 0x30, 0x34, 0x38,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x73, 0x61, 0x33, 0x30, 0x37, 0x32, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x73, 0x61, 0x34, 0x30, 0x39, 0x36, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x63, 0x63, 0x4e, 0x69, 0x73, 0x74, 0x50, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x45, 0x63, 0x63, 0x4e, 0x69, 0x73, 0x74, 0x50, 0x33, 0x38, 0x34, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x63, 0x63, 0x4e, 0x69, 0x73, 0x74, 0x50, 0x35, 0x32, 0x31, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x63, 0x63, 0x53, 0x65, 0x63, 0x67, 0x50, 0x32, 0x35, 0x36, 0x6b, 0x31,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x63, 0x63, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
	0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x6d, 0x61, 0x63,
	0x32, 0x32, 0x34, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x6d, 0x61, 0x63, 0x32, 0x35, 0x36,
	0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x6d, 0x61, 0x63, 0x33, 0x38, 0x34, 0x10, 0x0b, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x6d, 0x61, 0x63, 0x35, 0x31, 0x32, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x6d, 0x32, 0x10, 0x0d, 0x2a, 0x49, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x63, 0x10, 0x02,
	0x2a, 0x22, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x10, 0x01, 0x32, 0x9f, 0x04, 0x0a, 0x0a, 0x4b, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x15, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x09, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x04, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x10, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6b,
	0x6d, 0x73, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x6b,
	0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x45, 0x0a, 0x13, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x77, 0x65, 0x62, 0x33, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x08, 0x4b,
	0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x77,
	0x65, 0x62, 0x33, 0x2e, 0x69, 0x6f, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x6d, 0x73, 0x3b, 0x6b, 0x6d, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kms_kms_proto_rawDescOnce sync.Once
	file_kms_kms_proto_rawDescData = file_kms_kms_proto_rawDesc
)

func file_kms_kms_proto_rawDescGZIP() []byte {
	file_kms_kms_proto_rawDescOnce.Do(func() {
		file_kms_kms_proto_rawDescData = protoimpl.X.CompressGZIP(file_kms_kms_proto_rawDescData)
	})
	return file_kms_kms_proto_rawDescData
}

var file_kms_kms_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kms_kms_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_kms_kms_proto_goTypes = []any{
	(SigningAlgorithmSpec)(0),     // 0: kms.SigningAlgorithmSpec
	(KeySpec)(0),                  // 1: kms.KeySpec
	(KeyUsageType)(0),             // 2: kms.KeyUsageType
	(MessageType)(0),              // 3: kms.MessageType
	(*ImportKeyRequest)(nil),      // 4: kms.ImportKeyRequest
	(*ImportKeyReply)(nil),        // 5: kms.ImportKeyReply
	(*EnableKeyRequest)(nil),      // 6: kms.EnableKeyRequest
	(*EnableKeyReply)(nil),        // 7: kms.EnableKeyReply
	(*DisableKeyRequest)(nil),     // 8: kms.DisableKeyRequest
	(*DisableKeyReply)(nil),       // 9: kms.DisableKeyReply
	(*DescribeKeyRequest)(nil),    // 10: kms.DescribeKeyRequest
	(*DescribeKeyReply)(nil),      // 11: kms.DescribeKeyReply
	(*Tag)(nil),                   // 12: kms.Tag
	(*TagResourceRequest)(nil),    // 13: kms.TagResourceRequest
	(*TagResourceReply)(nil),      // 14: kms.TagResourceReply
	(*CreateKeyRequest)(nil),      // 15: kms.CreateKeyRequest
	(*CreateKeyReply)(nil),        // 16: kms.CreateKeyReply
	(*Key)(nil),                   // 17: kms.Key
	(*SignRequest)(nil),           // 18: kms.SignRequest
	(*SignReply)(nil),             // 19: kms.SignReply
	(*GetPublicKeyRequest)(nil),   // 20: kms.GetPublicKeyRequest
	(*GetPublicKeyReply)(nil),     // 21: kms.GetPublicKeyReply
	(*ListKeyRequest)(nil),        // 22: kms.ListKeyRequest
	(*ListKeyReply)(nil),          // 23: kms.ListKeyReply
	nil,                           // 24: kms.ImportKeyRequest.MetadataEntry
	nil,                           // 25: kms.ImportKeyReply.MetadataEntry
	nil,                           // 26: kms.DescribeKeyReply.MetadataEntry
	nil,                           // 27: kms.CreateKeyRequest.MetadataEntry
	nil,                           // 28: kms.CreateKeyReply.MetadataEntry
	nil,                           // 29: kms.Key.MetadataEntry
	(*timestamppb.Timestamp)(nil), // 30: google.protobuf.Timestamp
}
var file_kms_kms_proto_depIdxs = []int32{
	1,  // 0: kms.ImportKeyRequest.keySpec:type_name -> kms.KeySpec
	2,  // 1: kms.ImportKeyRequest.keyUsage:type_name -> kms.KeyUsageType
	12, // 2: kms.ImportKeyRequest.tags:type_name -> kms.Tag
	24, // 3: kms.ImportKeyRequest.metadata:type_name -> kms.ImportKeyRequest.MetadataEntry
	25, // 4: kms.ImportKeyReply.metadata:type_name -> kms.ImportKeyReply.MetadataEntry
	1,  // 5: kms.ImportKeyReply.keySpec:type_name -> kms.KeySpec
	2,  // 6: kms.ImportKeyReply.keyUsage:type_name -> kms.KeyUsageType
	12, // 7: kms.ImportKeyReply.tags:type_name -> kms.Tag
	30, // 8: kms.ImportKeyReply.createdAt:type_name -> google.protobuf.Timestamp
	30, // 9: kms.ImportKeyReply.updatedAt:type_name -> google.protobuf.Timestamp
	1,  // 10: kms.DescribeKeyReply.keySpec:type_name -> kms.KeySpec
	26, // 11: kms.DescribeKeyReply.metadata:type_name -> kms.DescribeKeyReply.MetadataEntry
	30, // 12: kms.DescribeKeyReply.createdAt:type_name -> google.protobuf.Timestamp
	30, // 13: kms.DescribeKeyReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 14: kms.TagResourceRequest.tags:type_name -> kms.Tag
	1,  // 15: kms.CreateKeyRequest.keySpec:type_name -> kms.KeySpec
	2,  // 16: kms.CreateKeyRequest.keyUsage:type_name -> kms.KeyUsageType
	12, // 17: kms.CreateKeyRequest.tags:type_name -> kms.Tag
	27, // 18: kms.CreateKeyRequest.metadata:type_name -> kms.CreateKeyRequest.MetadataEntry
	28, // 19: kms.CreateKeyReply.metadata:type_name -> kms.CreateKeyReply.MetadataEntry
	1,  // 20: kms.CreateKeyReply.keySpec:type_name -> kms.KeySpec
	2,  // 21: kms.CreateKeyReply.keyUsage:type_name -> kms.KeyUsageType
	12, // 22: kms.CreateKeyReply.tags:type_name -> kms.Tag
	30, // 23: kms.CreateKeyReply.createdAt:type_name -> google.protobuf.Timestamp
	30, // 24: kms.CreateKeyReply.updatedAt:type_name -> google.protobuf.Timestamp
	29, // 25: kms.Key.metadata:type_name -> kms.Key.MetadataEntry
	1,  // 26: kms.Key.keySpec:type_name -> kms.KeySpec
	2,  // 27: kms.Key.keyUsage:type_name -> kms.KeyUsageType
	12, // 28: kms.Key.tags:type_name -> kms.Tag
	30, // 29: kms.Key.createdAt:type_name -> google.protobuf.Timestamp
	30, // 30: kms.Key.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 31: kms.SignRequest.signingAlgorithm:type_name -> kms.SigningAlgorithmSpec
	3,  // 32: kms.SignRequest.messageType:type_name -> kms.MessageType
	17, // 33: kms.ListKeyReply.data:type_name -> kms.Key
	15, // 34: kms.KmsService.CreateKey:input_type -> kms.CreateKeyRequest
	4,  // 35: kms.KmsService.ImportKey:input_type -> kms.ImportKeyRequest
	18, // 36: kms.KmsService.Sign:input_type -> kms.SignRequest
	20, // 37: kms.KmsService.GetPublicKey:input_type -> kms.GetPublicKeyRequest
	13, // 38: kms.KmsService.TagResource:input_type -> kms.TagResourceRequest
	8,  // 39: kms.KmsService.DisableKey:input_type -> kms.DisableKeyRequest
	6,  // 40: kms.KmsService.EnableKey:input_type -> kms.EnableKeyRequest
	10, // 41: kms.KmsService.DescribeKey:input_type -> kms.DescribeKeyRequest
	22, // 42: kms.KmsService.List:input_type -> kms.ListKeyRequest
	16, // 43: kms.KmsService.CreateKey:output_type -> kms.CreateKeyReply
	5,  // 44: kms.KmsService.ImportKey:output_type -> kms.ImportKeyReply
	19, // 45: kms.KmsService.Sign:output_type -> kms.SignReply
	21, // 46: kms.KmsService.GetPublicKey:output_type -> kms.GetPublicKeyReply
	14, // 47: kms.KmsService.TagResource:output_type -> kms.TagResourceReply
	9,  // 48: kms.KmsService.DisableKey:output_type -> kms.DisableKeyReply
	7,  // 49: kms.KmsService.EnableKey:output_type -> kms.EnableKeyReply
	11, // 50: kms.KmsService.DescribeKey:output_type -> kms.DescribeKeyReply
	23, // 51: kms.KmsService.List:output_type -> kms.ListKeyReply
	43, // [43:52] is the sub-list for method output_type
	34, // [34:43] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_kms_kms_proto_init() }
func file_kms_kms_proto_init() {
	if File_kms_kms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kms_kms_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ImportKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ImportKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EnableKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EnableKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DisableKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DisableKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TagResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TagResourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SignReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetPublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetPublicKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kms_kms_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ListKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kms_kms_proto_msgTypes[0].OneofWrappers = []any{}
	file_kms_kms_proto_msgTypes[1].OneofWrappers = []any{}
	file_kms_kms_proto_msgTypes[7].OneofWrappers = []any{}
	file_kms_kms_proto_msgTypes[8].OneofWrappers = []any{}
	file_kms_kms_proto_msgTypes[11].OneofWrappers = []any{}
	file_kms_kms_proto_msgTypes[12].OneofWrappers = []any{}
	file_kms_kms_proto_msgTypes[13].OneofWrappers = []any{}
	file_kms_kms_proto_msgTypes[18].OneofWrappers = []any{}
	file_kms_kms_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kms_kms_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kms_kms_proto_goTypes,
		DependencyIndexes: file_kms_kms_proto_depIdxs,
		EnumInfos:         file_kms_kms_proto_enumTypes,
		MessageInfos:      file_kms_kms_proto_msgTypes,
	}.Build()
	File_kms_kms_proto = out.File
	file_kms_kms_proto_rawDesc = nil
	file_kms_kms_proto_goTypes = nil
	file_kms_kms_proto_depIdxs = nil
}
