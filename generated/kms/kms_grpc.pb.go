// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: kms/kms.proto

package kms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KmsService_CreateKey_FullMethodName    = "/kms.KmsService/CreateKey"
	KmsService_ImportKey_FullMethodName    = "/kms.KmsService/ImportKey"
	KmsService_Sign_FullMethodName         = "/kms.KmsService/Sign"
	KmsService_GetPublicKey_FullMethodName = "/kms.KmsService/GetPublicKey"
	KmsService_TagResource_FullMethodName  = "/kms.KmsService/TagResource"
	KmsService_DisableKey_FullMethodName   = "/kms.KmsService/DisableKey"
	KmsService_EnableKey_FullMethodName    = "/kms.KmsService/EnableKey"
	KmsService_DescribeKey_FullMethodName  = "/kms.KmsService/DescribeKey"
	KmsService_List_FullMethodName         = "/kms.KmsService/List"
)

// KmsServiceClient is the client API for KmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KmsServiceClient interface {
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyReply, error)
	ImportKey(ctx context.Context, in *ImportKeyRequest, opts ...grpc.CallOption) (*ImportKeyReply, error)
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignReply, error)
	GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyReply, error)
	TagResource(ctx context.Context, in *TagResourceRequest, opts ...grpc.CallOption) (*TagResourceReply, error)
	DisableKey(ctx context.Context, in *DisableKeyRequest, opts ...grpc.CallOption) (*DisableKeyReply, error)
	EnableKey(ctx context.Context, in *EnableKeyRequest, opts ...grpc.CallOption) (*EnableKeyReply, error)
	DescribeKey(ctx context.Context, in *DescribeKeyRequest, opts ...grpc.CallOption) (*DescribeKeyReply, error)
	List(ctx context.Context, in *ListKeyRequest, opts ...grpc.CallOption) (*ListKeyReply, error)
}

type kmsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKmsServiceClient(cc grpc.ClientConnInterface) KmsServiceClient {
	return &kmsServiceClient{cc}
}

func (c *kmsServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeyReply)
	err := c.cc.Invoke(ctx, KmsService_CreateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) ImportKey(ctx context.Context, in *ImportKeyRequest, opts ...grpc.CallOption) (*ImportKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportKeyReply)
	err := c.cc.Invoke(ctx, KmsService_ImportKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignReply)
	err := c.cc.Invoke(ctx, KmsService_Sign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicKeyReply)
	err := c.cc.Invoke(ctx, KmsService_GetPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) TagResource(ctx context.Context, in *TagResourceRequest, opts ...grpc.CallOption) (*TagResourceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagResourceReply)
	err := c.cc.Invoke(ctx, KmsService_TagResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) DisableKey(ctx context.Context, in *DisableKeyRequest, opts ...grpc.CallOption) (*DisableKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableKeyReply)
	err := c.cc.Invoke(ctx, KmsService_DisableKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) EnableKey(ctx context.Context, in *EnableKeyRequest, opts ...grpc.CallOption) (*EnableKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableKeyReply)
	err := c.cc.Invoke(ctx, KmsService_EnableKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) DescribeKey(ctx context.Context, in *DescribeKeyRequest, opts ...grpc.CallOption) (*DescribeKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeKeyReply)
	err := c.cc.Invoke(ctx, KmsService_DescribeKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) List(ctx context.Context, in *ListKeyRequest, opts ...grpc.CallOption) (*ListKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeyReply)
	err := c.cc.Invoke(ctx, KmsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KmsServiceServer is the server API for KmsService service.
// All implementations must embed UnimplementedKmsServiceServer
// for forward compatibility.
type KmsServiceServer interface {
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyReply, error)
	ImportKey(context.Context, *ImportKeyRequest) (*ImportKeyReply, error)
	Sign(context.Context, *SignRequest) (*SignReply, error)
	GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyReply, error)
	TagResource(context.Context, *TagResourceRequest) (*TagResourceReply, error)
	DisableKey(context.Context, *DisableKeyRequest) (*DisableKeyReply, error)
	EnableKey(context.Context, *EnableKeyRequest) (*EnableKeyReply, error)
	DescribeKey(context.Context, *DescribeKeyRequest) (*DescribeKeyReply, error)
	List(context.Context, *ListKeyRequest) (*ListKeyReply, error)
	mustEmbedUnimplementedKmsServiceServer()
}

// UnimplementedKmsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKmsServiceServer struct{}

func (UnimplementedKmsServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKmsServiceServer) ImportKey(context.Context, *ImportKeyRequest) (*ImportKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportKey not implemented")
}
func (UnimplementedKmsServiceServer) Sign(context.Context, *SignRequest) (*SignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedKmsServiceServer) GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedKmsServiceServer) TagResource(context.Context, *TagResourceRequest) (*TagResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagResource not implemented")
}
func (UnimplementedKmsServiceServer) DisableKey(context.Context, *DisableKeyRequest) (*DisableKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableKey not implemented")
}
func (UnimplementedKmsServiceServer) EnableKey(context.Context, *EnableKeyRequest) (*EnableKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableKey not implemented")
}
func (UnimplementedKmsServiceServer) DescribeKey(context.Context, *DescribeKeyRequest) (*DescribeKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeKey not implemented")
}
func (UnimplementedKmsServiceServer) List(context.Context, *ListKeyRequest) (*ListKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKmsServiceServer) mustEmbedUnimplementedKmsServiceServer() {}
func (UnimplementedKmsServiceServer) testEmbeddedByValue()                    {}

// UnsafeKmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KmsServiceServer will
// result in compilation errors.
type UnsafeKmsServiceServer interface {
	mustEmbedUnimplementedKmsServiceServer()
}

func RegisterKmsServiceServer(s grpc.ServiceRegistrar, srv KmsServiceServer) {
	// If the following call pancis, it indicates UnimplementedKmsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KmsService_ServiceDesc, srv)
}

func _KmsService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_ImportKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).ImportKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_ImportKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).ImportKey(ctx, req.(*ImportKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_Sign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).GetPublicKey(ctx, req.(*GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_TagResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).TagResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_TagResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).TagResource(ctx, req.(*TagResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_DisableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).DisableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_DisableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).DisableKey(ctx, req.(*DisableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_EnableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).EnableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_EnableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).EnableKey(ctx, req.(*EnableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_DescribeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).DescribeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_DescribeKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).DescribeKey(ctx, req.(*DescribeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).List(ctx, req.(*ListKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KmsService_ServiceDesc is the grpc.ServiceDesc for KmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kms.KmsService",
	HandlerType: (*KmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _KmsService_CreateKey_Handler,
		},
		{
			MethodName: "ImportKey",
			Handler:    _KmsService_ImportKey_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _KmsService_Sign_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _KmsService_GetPublicKey_Handler,
		},
		{
			MethodName: "TagResource",
			Handler:    _KmsService_TagResource_Handler,
		},
		{
			MethodName: "DisableKey",
			Handler:    _KmsService_DisableKey_Handler,
		},
		{
			MethodName: "EnableKey",
			Handler:    _KmsService_EnableKey_Handler,
		},
		{
			MethodName: "DescribeKey",
			Handler:    _KmsService_DescribeKey_Handler,
		},
		{
			MethodName: "List",
			Handler:    _KmsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kms/kms.proto",
}
